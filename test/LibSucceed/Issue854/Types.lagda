%include agda.fmt

\subsection{Types}
\label{types}

\AgdaHide{
\begin{code}
module Issue854.Types where

open import Data.Product
open import Data.List

open import Issue854.Context

infixr 3 _โ_
infixr 4 _โ_
infixr 4 _&_
infixr 5 _โ_
\end{code}
}

\begin{code}
mutual

  -- Value types.
  data VType : Set where

    -- Thunk
    โ_โ  : (C : CType) โ VType

    -- Products
    ๐    : VType
    _โ_  : (U V : VType) โ VType

    -- Sums
    ๐    : VType
    _โ_  : (U V : VType) โ VType

    ฮผ    : (ฮ : Sig) โ VType

  -- Computation types.
  data CType : Set where

    -- Returns
    _โ_  : (ฮฃ : Sig)(V : VType) โ CType

    -- Function space
    _โ_  : (V : VType)(C : CType) โ CType

    -- Products
    โคโฒ   : CType
    _&_  : (B C : CType) โ CType

  Op  = VType ร VType
  Sig = List Op
\end{code}

\begin{code}
Ctx = Snoc VType

OpAlg : Op โ CType โ CType
OpAlg (P , A) C = P โ โ A โ C โ โ C

Alg : Sig โ CType โ List CType
Alg []       C = []
Alg (ฯ โท ฮฉ)  C = OpAlg ฯ C โท Alg ฮฉ C

OpPHomo : Op โ Sig โ VType โ VType โ Sig โ VType โ CType
OpPHomo (P , A) ฮฃ U I ฮฃโฒ V =
    P โ โ A โ ((ฮฃ ++ ฮฃโฒ) โ U & (I โ ฮฃโฒ โ V)) โ โ I โ ฮฃโฒ โ V

PHomoโฒ : Sig โ Sig โ VType โ VType โ Sig โ VType โ List CType
PHomoโฒ []       ฮฃ U I ฮฃโฒ V = (U โ I โ ฮฃโฒ โ V) โท []
PHomoโฒ (ฯ โท ฮฉ)  ฮฃ U I ฮฃโฒ V = OpPHomo ฯ ฮฃ U I ฮฃโฒ V โท PHomoโฒ ฮฉ ฮฃ U I ฮฃโฒ V

PHomo : Sig โ VType โ VType โ Sig โ VType โ List CType
PHomo ฮฃ U I ฮฃโฒ V = PHomoโฒ ฮฃ ฮฃ U I ฮฃโฒ V
\end{code}
